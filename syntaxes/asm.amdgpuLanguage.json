{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "AMDGPU Assembly",
  "scopeName": "source.amdgpu",
  "patterns": [
    { "include": "source.amdgpu.instr" },
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#constants" },
    { "include": "#registers" },
    { "include": "#directives" },
    { "include": "#labels" },
    { "include": "#sections" },
    { "include": "#symbols" },
    { "include": "#functions" },
    { "include": "#memory_operands" },
    { "include": "#structure" },
    { "include": "#macros" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.amdgpu",
          "match": "//.*$"
        },
        {
          "name": "comment.line.semicolon.amdgpu",
          "match": ";.*$"
        },
        {
          "name": "comment.block.amdgpu",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "directives": {
      "patterns": [
        {
          "name": "keyword.control.directive.define.amdgpu",
          "match": "%define\\b"
        },
        {
          "name": "keyword.control.directive.assign.amdgpu",
          "match": "%assign\\b"
        },
        {
          "name": "keyword.control.directive.equ.amdgpu",
          "match": "\\bequ\\b"
        },
        {
          "name": "keyword.control.directive.amdgpu",
          "match": "\\.(file|cfi_[a-zA-Z_]+|gcc_except_table|ctors|ascii|lcomm|byte|ident|align|rdata|rodata|comment|tbss|init|fini|note|debug|intel_syntax)\\b"
        },
        {
          "name": "keyword.control.directive.offset.amdgpu",
          "match": "\\bOFFSET\\b"
        },
        {
          "name": "keyword.control.directive.uleb128.amdgpu",
          "match": "\\.uleb128\\b"
        },
        {
          "name": "keyword.control.directive.def.amdgpu",
          "match": "\\.def\\b"
        },
        {
          "name": "keyword.control.directive.long.amdgpu",
          "match": "\\.long\\b"
        },
        {
          "name": "keyword.control.directive.scl.amdgpu",
          "match": "\\.scl\\b"
        },
        {
          "name": "keyword.control.directive.type.amdgpu",
          "match": "\\.type\\b"
        },
        {
          "name": "keyword.control.directive.endef.amdgpu",
          "match": "\\.endef\\b"
        },
        {
          "name": "keyword.control.directive.globl.amdgpu",
          "match": "\\.globl\\b"
        },
        {
          "name": "keyword.control.directive.space.amdgpu",
          "match": "\\.space\\b"
        },
        {
          "name": "keyword.control.directive.intel_syntax.amdgpu",
          "match": "\\.intel_syntax\\b"
        },
        {
          "name": "keyword.control.directive.extern.amdgpu",
          "match": "\\bextern\\b"
        },
        {
          "name": "keyword.control.directive.global.amdgpu",
          "match": "\\bglobal\\b"
        },
        {
          "name": "keyword.control.directive.weak.amdgpu",
          "match": "\\.weak\\b"
        },
        {
          "name": "keyword.control.directive.hidden.amdgpu",
          "match": "\\.hidden\\b"
        },
        {
          "name": "keyword.control.directive.protected.amdgpu",
          "match": "\\.protected\\b"
        },
        {
          "name": "keyword.control.directive.internal.amdgpu",
          "match": "\\.internal\\b"
        },
        {
          "name": "keyword.control.directive.default.amdgpu",
          "match": "\\bdefault\\b"
        },
        {
          "name": "keyword.control.directive.rel.amdgpu",
          "match": "\\brel\\b"
        }
      ]
    },
    "labels": {
      "patterns": [
        {
          "name": "entity.name.function.label.amdgpu",
          "match": "^[a-zA-Z_][a-zA-Z0-9_]*:"
        },
        {
          "name": "entity.name.tag.label.amdgpu",
          "match": "^L[a-zA-Z0-9_]+:"
        },
        {
          "name": "entity.name.label.special.amdgpu",
          "match": "^[._][a-zA-Z_][a-zA-Z0-9_]*:"
        }
      ]
    },
    "sections": {
      "patterns": [
        {
          "name": "entity.name.section.amdgpu",
          "match": "\\.(section .(text|data|bss|tbss|tcomm))\\b"
        }
      ]
    },
    "registers": {
      "patterns": [
        {
          "name": "variable.language.register.amdgpu",
          "match": "\\b(s[0-9]+)\\b"
        },
        {
          "name": "variable.language.register.amdgpu",
          "match": "\\b(v[0-9]+)\\b"
        },
        {
          "name": "variable.language.register.amdgpu",
          "match": "\\b(m[0-9]+)\\b"
        },
                {
          "name": "variable.language.register.amdgpu",
          "match": "\\b(acc[0-9]+)\\b"
        },
        {
          "name": "variable.language.register.amdgpu",
          "match": "\\b(vcc|exec)\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.numeric.hex.amdgpu",
          "match": "\\b(0x[0-9A-Fa-f]+)\\b"
        },
        {
          "name": "constant.numeric.decimal.amdgpu",
          "match": "\\b([0-9]+)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.amdgpu",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.amdgpu",
          "match": "\\\\."
        }
      ]
    },
    "memory_operands": {
      "patterns": [
        {
          "name": "storage.type.memory.amdgpu",
          "match": "\\b(BYTE|WORD|DWORD|QWORD|XMMWORD|YMMWORD|ZMMWORD)\\s+PTR\\b"
        },
        {
          "name": "storage.type.memory.amdgpu",
          "match": "\\b(TBYTE|TWORD|DQWORD|OWORD|FWORD)\\b"
        },
        {
          "name": "storage.type.memory.bracketed.amdgpu",
          "match": "\\[(.*?)\\]",
          "captures": {
            "1": { "name": "entity.name.memory_operand.inside_brackets.amdgpu" }
          }
        }
      ]
    },
    "symbols": {
      "patterns": [
        {
          "name": "entity.name.function.amdgpu",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*|__[a-zA-Z0-9_]+)\\b"
        },
        {
          "name": "entity.name.label.amdgpu",
          "match": "\\b(L[a-zA-Z0-9_]+|FLAT:[a-zA-Z_][a-zA-Z0-9_]*)\\b"
        }
      ]
    },
    "structure": {
      "patterns": [
        {
          "name": "entity.name.structure.amdgpu",
          "match": "\\bSTRUC\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b"
        },
        {
          "name": "variable.parameter.structure_member.amdgpu",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s+OFFSET\\s*\\b"
        },
        {
          "name": "constant.numeric.size.amdgpu",
          "match": "\\b([0-9]+)\\s*:\\s*([0-9]+)\\b"
        }
      ]
    },
    "directive_definitions": {
      "patterns": [
        {
          "name": "keyword.control.directive.def.amdgpu",
          "begin": "\\.def\\s+",
          "end": ";",
          "patterns": [
            {
              "name": "entity.name.function.amdgpu",
              "match": "([a-zA-Z_][a-zA-Z0-9_]*)"
            },
            {
              "name": "keyword.control.directive.scl.amdgpu",
              "match": "\\.scl\\s+([0-9]+)"
            },
            {
              "name": "keyword.control.directive.type.amdgpu",
              "match": "\\.type\\s+([0-9]+)"
            },
            {
              "name": "keyword.control.directive.endef.amdgpu",
              "match": "\\.endef"
            }
          ]
        }
      ]
    },
    "macros": {
      "patterns": [
        {
          "name": "keyword.control.macro.amdgpu",
          "match": "\\b(macro|endm)\\b"
        },
        {
          "name": "entity.name.macro.amdgpu",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s+macro\\b"
        }
      ]
    }
  }
}
